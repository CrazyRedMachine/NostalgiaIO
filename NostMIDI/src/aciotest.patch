diff --git a/GNUmakefile b/GNUmakefile
index 99cc225..fbdc6fe 100644
--- a/GNUmakefile
+++ b/GNUmakefile
@@ -28,7 +28,7 @@ cppflags              := -I src -I src/main -I src/test -DGITREV=$(gitrev)
 cflags                := -O2 -pipe -ffunction-sections -fdata-sections \
                           -Wall -std=c99 -DPSAPI_VERSION=1
 cflags_release        := -Werror
-ldflags		          := -Wl,--gc-sections -static-libgcc
+ldflags		          := -Wl,--gc-sections -static-libgcc -Lsrc/lib -l:teVirtualMIDI64.dll
 
 #
 # The first target that GNU Make encounters becomes the default target.
diff --git a/src/imports/teVirtualMIDI/teVirtualMIDI.h b/src/imports/teVirtualMIDI/teVirtualMIDI.h
new file mode 100644
index 0000000..f1b1acb
--- /dev/null
+++ b/src/imports/teVirtualMIDI/teVirtualMIDI.h
@@ -0,0 +1,253 @@
+/* teVirtualMIDI user-space interface - v1.3.0.43
+ *
+ * Copyright 2009-2019, Tobias Erichsen
+ * All rights reserved, unauthorized usage & distribution is prohibited.
+ *
+ * For technical or commercial requests contact: info <at> tobias-erichsen <dot> de
+ *
+ * teVirtualMIDI.sys is a kernel-mode device-driver which can be used to dynamically create & destroy
+ * midiports on Windows (XP to Windows 8, 32bit & 64bit).  The "back-end" of teVirtualMIDI which is
+ * defined by this include file of teVirtualMIDI can be used to create & destroy such ports and receive
+ * and transmit data from/to those created ports.
+ *
+ * The DLL sets the last-error for the thread that called one of the functions below when
+ * internal errors come up - those errors can be retrieved via GetLastError().
+ * Here some of the more specific errors that you can encounter:
+ *
+ * ERROR_OLD_WIN_VERSION:
+ *	Your Windows-version is too old for dynamic MIDI-port creation.
+ *	You need at least Service-Pack 2 XP and W2K3.  Vista and Windows 7 work out of the box
+ *
+ * ERROR_INVALID_NAME:
+ *	The name you specified contains invalid characters or is too short.
+ *
+ * ERROR_ALREADY_EXISTS,ERROR_ALIAS_EXISTS:
+ *	The name you specified is already existing (either as a port created by virtualMIDI or
+ *	by another MIDI-driver)
+ *
+ * ERROR_PATH_NOT_FOUND:
+ *	The driver could not be opened.  Possibly the driver was not installed or is inactive.
+ *
+ * ERROR_REVISION_MISMATCH:
+ *	Due to some installation issue the virtualMIDIxx.dll in use and the virtualMIDI.sys
+ *	driver-version do not match.  Therefore operation is not possible!
+ */
+
+#ifndef _VIRTUAL_MIDI_H_
+#define _VIRTUAL_MIDI_H_
+
+#include <windows.h>
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+
+/* Bits in Mask to enable logging for specific areas */
+/* TE_VM_LOGGING_MISC - log internal stuff (port enable, disable...) */
+#define TE_VM_LOGGING_MISC	1
+/* TE_VM_LOGGING_RX - log data received from the driver */
+#define TE_VM_LOGGING_RX	2
+/* TE_VM_LOGGING_TX - log data sent to the driver */
+#define TE_VM_LOGGING_TX	4
+
+/* This is the size of the buffer that is being used for communication
+ * with the driver when instanciating a port with the old, deprecated
+ * "virtualMIDICreatePort" function.  This value is currently 128kb - 1,
+ * but may change anytime in the future.  This value also limits the
+ * maximum size of received sysex-data due to the parser in the merger-
+ * module in the driver.
+ */
+#define TE_VM_DEFAULT_BUFFER_SIZE	0x1fffe
+
+
+/* Bits in Mask to virtualMIDICreatePortEx2 */
+/* TE_VM_FLAGS_PARSE_RX tells the driver to always provide valid preparsed MIDI-commands either via Callback or via virtualMIDIGetData */
+#define TE_VM_FLAGS_PARSE_RX			(1)
+/* TE_VM_FLAGS_PARSE_TX tells the driver to parse all data received via virtualMIDISendData */
+#define TE_VM_FLAGS_PARSE_TX			(2)
+/* TE_VM_FLAGS_INSTANTIATE_RX_ONLY - Only the "midi-out" part of the port is created */
+#define TE_VM_FLAGS_INSTANTIATE_RX_ONLY		(4)
+/* TE_VM_FLAGS_INSTANTIATE_TX_ONLY - Only the "midi-in" part of the port is created */
+#define TE_VM_FLAGS_INSTANTIATE_TX_ONLY		(8)
+/* TE_VM_FLAGS_INSTANTIATE_BOTH - a bidirectional port is created */
+#define TE_VM_FLAGS_INSTANTIATE_BOTH		(12)
+
+#define TE_VM_FLAGS_SUPPORTED			( TE_VM_FLAGS_PARSE_RX | TE_VM_FLAGS_PARSE_TX | TE_VM_FLAGS_INSTANTIATE_RX_ONLY | TE_VM_FLAGS_INSTANTIATE_TX_ONLY )
+
+/*
+ * Pointer to an opened teVirtualMIDI-port.  The data referenced by this pointer is for internal
+ * use only, considered to be opaque and can change with each revision of the DLL.
+ */
+typedef struct _VM_MIDI_PORT VM_MIDI_PORT, *LPVM_MIDI_PORT;
+
+
+
+/* Callback interface.  This callback is called by the driver/interface-dll for a packet of MIDI-data that is received from the driver
+ * by the application using the virtual MIDI-port.
+ *
+ * This callback is called in an arbitrary thread-context - so make sure you have all your locking in order!
+ *
+ * If you have created the virtual-MIDI-port and specified TE_VM_FLAGS_PARSE_RX in the flags parameter, you will
+ * receive a fully valid, preparsed MIDI-command with each callback.  The maximum size of data will be the amount
+ * you specified in maxSysexLength.  Invalid commands or Sysex-commands with a length in excess of maxSysexLength
+ * will be discarded and not forwarded to you.  Realtime-MIDI-commands will never be "intermingled" with other
+ * commands (either normal or Sysex) in this mode.  If a realtime-MIDI-command is detected, it is sent to the
+ * application before the command that it was intermingled with.
+ *
+ * In case of the driver being deactivated, the callback is called one time with a midiDataBytes==NULL and
+ * length==zero, either the driver has been disabled, or another application using the driver has started
+ * the installation of a newer driver-version
+ *
+ * You can throttle the speed of your virtualMIDI-port by not returning immediately from
+ * this callback after you have taken care of the data received.
+ *
+ * If you want to throttle to 31250 bps for example, you need to place this line
+ * before you return from your callback-function:
+ *
+ * Sleep( length * 10 * 1000) / 31250 );
+ */
+typedef void ( CALLBACK *LPVM_MIDI_DATA_CB )( LPVM_MIDI_PORT midiPort, LPBYTE midiDataBytes, DWORD length, DWORD_PTR dwCallbackInstance );
+
+
+/* D E P R E C A T E D   -   do not use for new implementations */
+LPVM_MIDI_PORT CALLBACK virtualMIDICreatePort( LPCWSTR portName, LPVM_MIDI_DATA_CB callback, DWORD_PTR dwCallbackInstance );
+/* D E P R E C A T E D   -   do not use for new implementations */
+LPVM_MIDI_PORT CALLBACK virtualMIDICreatePortEx( LPCWSTR portName, LPVM_MIDI_DATA_CB callback, DWORD_PTR dwCallbackInstance, DWORD maxSysexLength );
+
+
+/* virtualMIDICreatePortEx2 - this is the current intended function to create a virtual MIDI-port.
+ *
+ * You can specify a name for the device to be created. Each named port can only exist once on a system.
+ *
+ * When the application terminates, the port will be deleted (or if the public front-end of the port is already in use by a DAW-application,
+ * it will become inactive - giving back apropriate errors to the application using this port.
+ *
+ * In addition to the name, you can supply a callback-interface, which will be called for all MIDI-data received by the virtual-midi port.
+ * You can also provide instance-data, which will also be handed back within the callback, to have the ability to reference port-specific
+ * data-structures within your application.
+ *
+ * If you specify "NULL" for the callback function, you will not receive any callback, but can call the blocking function "virtualMIDIGetData"
+ * to retrieve received MIDI-data/commands.  This is especially useful if one wants to interface this library to managed code like .NET or
+ * Java, where callbacks into managed code are potentially complex or dangerous.  A call to virtualMIDIGetData when a callback has been
+ * set during the creation will return with "ERROR_INVALID_FUNCTION".
+ *
+ * If you specified TE_VM_FLAGS_PARSE_RX in the flags parameter, you will always get one fully valid, preparsed MIDI-command in each callback.
+ * In maxSysexLength you should specify a value that is large enough for the maximum size of Sysex that you expect to receive.  Sysex-commands
+ * larger than the value specified here will be discarded and not sent to the user.  Realtime-MIDI-commands will never be "intermingled" with
+ * other commands (either normal or Sysex) in this mode.  If a realtime-MIDI-command is detected, it is sent to the application before the
+ * command that it was intermingled with.
+ *
+ * If you specify a maxSysexLength smaller than 2, you will receive fully valid preparsed MIDI-commands, but no Sysex-commands, since a
+ * Sysex-command must be at least composed of 0xf0 + 0xf7 (start and end of sysex).  Since the parser will never be able to construct a
+ * valid Sysex, you will receive none - but all other MIDI-commands will be parsed out and sent to you.
+ *
+ * When a NULL-pointer is handed back to the application, creation failed.  You can check GetLastError() to find out the specific problem
+ * why the port could not be created.
+ */
+LPVM_MIDI_PORT CALLBACK virtualMIDICreatePortEx2( LPCWSTR portName, LPVM_MIDI_DATA_CB callback, DWORD_PTR dwCallbackInstance, DWORD maxSysexLength, DWORD flags );
+
+/* virtualMIDICreatePortEx3
+ *
+ * This version of the function adds the ability to provide two pointers to GUIDs that can be used to set the manufacturer and product guids
+ * that an application using the public port can retrieve using midiInGetDevCaps or midiOutGetDevCaps with the extended device-capability-
+ * structures (MIDIINCAPS2 and MIDIOUTCAPS2).  If those pointers are set to NULL, the default-guids of the teVirtualMIDI-driver will be used.
+ */
+LPVM_MIDI_PORT CALLBACK virtualMIDICreatePortEx3( LPCWSTR portName, LPVM_MIDI_DATA_CB callback, DWORD_PTR dwCallbackInstance, DWORD maxSysexLength, DWORD flags, GUID *manufacturer, GUID *product );
+
+
+
+/* With this function, you can close a virtual MIDI-port again, after you have instanciated it.
+ *
+ * After the return from this function, no more callbacks will be received.
+ *
+ * Beware: do not call this function from within the midi-port-data-callback.  This may result in a deadlock!
+ */
+void CALLBACK virtualMIDIClosePort( LPVM_MIDI_PORT midiPort );
+
+
+
+/* With this function you can send a buffer of MIDI-data to the driver / the application that opened the virtual-MIDI-port.
+ * If this function returns false, you may check GetLastError() to find out what caused the problem.
+ *
+ * This function should always be called with a single complete and valid midi-command (1-3 octets, or possibly more
+ * for sysex).  Sysex-commands should not be split!  Realtime-MIDI-commands shall not be intermingled with other MIDI-
+ * commands, but sent seperately!
+ *
+ * The data-size that can be used to send data to the virtual ports may be limited in size to prevent
+ * an erratic application to allocate too much of the limited kernel-memory thus interfering with
+ * system-stability.  The current limit is 512kb.
+ */
+BOOL CALLBACK virtualMIDISendData( LPVM_MIDI_PORT midiPort, LPBYTE midiDataBytes, DWORD length );
+
+
+
+/* With this function you can use virtualMIDI without usage of callbacks.  This is especially interesting
+ * if you want to interface the DLL to managed environments like Java or .NET where callbacks from native
+ * to managed code are more complex.
+ *
+ * To use it, you need to open a virtualMIDI-port specifying NULL as callback.  If you have specified a
+ * callback when opening the port, this function will fail - you cannot mix callbacks & reading via this
+ * function.
+ *
+ * You need to provide a buffer large enough to retrieve the amount of data available.  Otherwise the
+ * function will fail and return to you the necessary size in the length parameter.  If you specify
+ * midiDataBytes to be NULL, the function will succeed but only return the size of buffer necessary
+ * to retrieve the next MIDI-packet.
+ *
+ * virtualMIDIGetData will block until a complete block of data is available.  Depending on the fact if
+ * you have specified to parse data into valid commands or just chunks of unprocessed data, you will
+ * either receive the unparsed chunk (possibly containing multiple MIDI-commands), or a single, fully
+ * valid MIDI-command.  In both cases, the length parameter will be filled with the length of data retrieved.
+ *
+ * You may only call virtualMIDIGetData once concurrently.  A call to this function will fail if another
+ * call to this function is still not completed.
+ */
+BOOL CALLBACK virtualMIDIGetData( LPVM_MIDI_PORT midiPort, LPBYTE midiDataBytes, PDWORD length );
+
+
+
+/* With this function an application can find out the process-ids of all applications
+ * that are currently using this virtual MIDI port
+ * A pointer to an array of ULONG64s must be supplied.  Currently no more than 16 process ids are returned
+ * Before calling the length is the size of the buffer provided by the application in bytes
+ * After calling the length is the number of process-ids returned times sizeof(ULONG64)
+ */
+BOOL CALLBACK virtualMIDIGetProcesses( LPVM_MIDI_PORT midiPort, ULONG64 *processIds, PDWORD length );
+
+
+
+/* With this function you can abort the created midiport.  This may be useful in case you want
+ * to use the virtualMIDIGetData function which is blocking until it gets data.  After this
+ * call has been issued, the port will be shut-down and any further call (other than virtualMIDIClosePort)
+ * will fail
+ */
+BOOL CALLBACK virtualMIDIShutdown( LPVM_MIDI_PORT midiPort );
+
+
+
+/* With this function you can retrieve the version of the driver that you are using.
+ * In addition you will receive the version-number as a wide-string constant as return-value.
+ */
+LPCWSTR CALLBACK virtualMIDIGetVersion( PWORD major, PWORD minor, PWORD release, PWORD build );
+
+
+
+/* With this function you can retrieve the version of the driver that you are using.
+ * In addition you will receive the version-number as a wide-string constant as return-value.
+ */
+LPCWSTR CALLBACK virtualMIDIGetDriverVersion( PWORD major, PWORD minor, PWORD release, PWORD build );
+
+
+
+/* With this function logging can be activated into DbgView.
+ * Please specify a bitmask made up form binary "or"ed values from TE_VM_LOGGING_XXX
+ */
+DWORD CALLBACK virtualMIDILogging( DWORD logMask );
+
+
+#ifdef __cplusplus
+	}
+#endif
+
+#endif
diff --git a/src/lib/teVirtualMIDI64.dll b/src/lib/teVirtualMIDI64.dll
new file mode 100644
index 0000000..15ed62b
Binary files /dev/null and b/src/lib/teVirtualMIDI64.dll differ
diff --git a/src/lib/teVirtualMIDI64.lib b/src/lib/teVirtualMIDI64.lib
new file mode 100644
index 0000000..8589b50
Binary files /dev/null and b/src/lib/teVirtualMIDI64.lib differ
diff --git a/src/main/aciotest/main.c b/src/main/aciotest/main.c
index e773db7..6e78cfd 100644
--- a/src/main/aciotest/main.c
+++ b/src/main/aciotest/main.c
@@ -23,21 +23,6 @@ static uint8_t bi2a_mode = 0;
 static bool aciotest_assign_handler(
     char product[4], struct aciotest_handler_node_handler *handler)
 {
-    if (!memcmp(product, "ICCA", 4) || !memcmp(product, "ICCB", 4) ||
-        !memcmp(product, "ICCC", 4)) {
-        handler->init = aciotest_icca_handler_init;
-        handler->update = aciotest_icca_handler_update;
-
-        return true;
-    }
-
-    if (!memcmp(product, "KFCA", 4)) {
-        handler->init = aciotest_kfca_handler_init;
-        handler->update = aciotest_kfca_handler_update;
-
-        return true;
-    }
-
     if (!memcmp(product, "PANB", 4)) {
         handler->init = aciotest_panb_handler_init;
         handler->update = aciotest_panb_handler_update;
@@ -45,17 +30,6 @@ static bool aciotest_assign_handler(
         return true;
     }
 
-    if (!memcmp(product, "BI2A", 4)) {
-        if (bi2a_mode == 0) {
-            handler->init = aciotest_bi2a_sdvx_handler_init;
-            handler->update = aciotest_bi2a_sdvx_handler_update;
-
-            return true;
-        } else {
-            printf("Unknown BI2A device specified");
-        }
-    }
-
     return false;
 }
 
@@ -64,32 +38,28 @@ static bool aciotest_assign_handler(
  */
 int main(int argc, char **argv)
 {
-    if (argc < 3) {
-        printf(
-            "aciotest, build "__DATE__
-            " " __TIME__
-            "\n"
-            "Usage: %s <com port str> <baud rate>\n"
-            "Example for two slotted readers: %s COM1 57600\n",
-            argv[0],
-            argv[0]);
-        return -1;
-    }
+    if (argc > 1 && strcmp(argv[1], "-d") == 0)
+	  log_to_writer(log_writer_stdout, NULL);
 
-    log_to_writer(log_writer_stdout, NULL);
+    system("cls");
+	printf("\n\n               Nostalgia ACIO to MIDI\n");
+	printf("               ----------------------\n");
+	printf("                 by CrazyRedMachine\n\n");
+	printf("Thanks to Bemanitools and Tobias Erichsen VirtualMIDI driver\n");
+	printf("\n\n");
 
-
-    struct aciodrv_device_ctx *device = aciodrv_device_open_path(argv[1], atoi(argv[2]));
+	printf("Opening device...");
+    struct aciodrv_device_ctx *device = aciodrv_device_open_path("COM1", atoi("115200"));
 
     if (!device) {
-        printf("Opening acio device failed\n");
+        printf(" failed x_x\nTry power cycling your panel and make sure it's connected to COM1\n");
         return -1;
     }
 
-    printf("Opening acio device successful\n");
+    printf("success!\n");
 
     uint8_t node_count = aciodrv_device_get_node_count(device);
-    printf("Enumerated %d nodes\n", node_count);
+    //printf("Enumerated %d nodes\n", node_count);
 
     struct aciotest_handler_node_handler handler[aciotest_handler_max];
     memset(
@@ -100,14 +70,14 @@ int main(int argc, char **argv)
     for (uint8_t i = 0; i < node_count; i++) {
         char product[4];
         aciodrv_device_get_node_product_ident(device, i, product);
-        printf(
+      /*  printf(
             "> %d: %c%c%c%c\n",
             i + 1,
             product[0],
             product[1],
             product[2],
             product[3]);
-
+*/
         if (!aciotest_assign_handler(product, &handler[i])) {
             printf(
                 "ERROR: Unsupported acio node product %c%c%c%c on node %d\n",
@@ -116,6 +86,7 @@ int main(int argc, char **argv)
                 product[2],
                 product[3],
                 i);
+				
         }
     }
 
@@ -128,15 +99,15 @@ int main(int argc, char **argv)
         }
     }
 
-    printf(">>> Initializing done, press enter to start update loop <<<\n");
-
+    printf(">>> open \"Nostalgia ACIO MIDI Interface\" in your soft <<<\n");
+/*
     if (getchar() != '\n') {
         return 0;
     }
-
+*/
     while (true) {
-        system("cls");
-        printf("%d\n", aciotest_cnt++);
+        //system("cls");
+        //printf("%d\n", aciotest_cnt++);
 
         for (uint8_t i = 0; i < aciotest_handler_max; i++) {
             if (handler[i].update != NULL) {
@@ -149,7 +120,7 @@ int main(int argc, char **argv)
         }
 
         /* avoid cpu banging */
-        Sleep(30);
+        Sleep(10);
     }
 
     return 0;
diff --git a/src/main/aciotest/panb.c b/src/main/aciotest/panb.c
index 0d6ae50..07d05c4 100644
--- a/src/main/aciotest/panb.c
+++ b/src/main/aciotest/panb.c
@@ -5,27 +5,78 @@
 
 #include "aciodrv/panb.h"
 #include "aciodrv-proc/panb.h"
+#include "imports/teVirtualMIDI/teVirtualMIDI.h"
+#define MAX_SYSEX_BUFFER	65535
 
 struct panb_handler_ctx {
     bool running;
 };
 
+uint8_t button[AC_IO_PANB_MAX_KEYS];
+LPVM_MIDI_PORT g_port = NULL;
+
+void midi_send_note(unsigned char status, unsigned char note, unsigned char velocity)
+{
+	if (g_port == NULL) return;
+	
+    unsigned char buffer[3];
+
+    buffer[0] = status;
+    buffer[1] = note;
+    buffer[2] = velocity;
+
+    virtualMIDISendData(g_port, buffer, 3);
+
+    return;
+}
+
+/* Nostalgia panel only has 14 or 15 velocity values, whereas midi has 127 */
+/* dyn_range sets the span of these 15 values on the midi value (eg. 50 means 
+/* the panel will yield midi velocities between 77 and 127) */
+#define DYN_RANGE 60
+void noteNOST(uint8_t i)
+{
+  static uint8_t pitch[31] = {48,50,52,53,55,57,59,60,62,64,65,67,69,71,72,74,76,77,79,81,83,84,86,88,89,91,93,95,96,97,98};
+  static bool current[31] = {false};
+  
+  if (button[i] && !current[i])
+  {
+    float max_vel = (i%2==0)?15.:14.;
+    float ratio = (float)(button[i])*1./max_vel;
+      
+    midi_send_note(128+16,pitch[i],(127-DYN_RANGE)+ratio*DYN_RANGE);
+    current[i] = true;
+  }
+  else if (!button[i] && current[i])
+  {
+    midi_send_note(128,pitch[i],0);
+    current[i] = false;
+  }
+}
+
 bool aciotest_panb_handler_init(struct aciodrv_device_ctx *device, uint8_t node_id, void **ctx)
 {
     if (node_id != 0) {
         return true;
     }
 
+	memset(button, 0, AC_IO_PANB_MAX_KEYS);
+	
     *ctx = malloc(sizeof(struct panb_handler_ctx));
     struct panb_handler_ctx *panb_ctx = (struct panb_handler_ctx*)*ctx;
     panb_ctx->running = true;
 
+	//fprintf(stderr, "Open virtualmidi\n");
+	g_port = virtualMIDICreatePortEx2( L"Nostalgia ACIO MIDI Interface", NULL, 0, MAX_SYSEX_BUFFER, TE_VM_FLAGS_PARSE_RX );
+	if (g_port == NULL)
+	{
+		fprintf(stderr, "virtualMIDI: Could not create port (%ld)\n", GetLastError());
+	}
     return aciodrv_proc_panb_init(device);
 }
 
 bool aciotest_panb_handler_update(struct aciodrv_device_ctx *device, uint8_t node_id, void *ctx)
 {
-    uint8_t button[AC_IO_PANB_MAX_KEYS];
     struct ac_io_panb_poll_out state;
     struct panb_handler_ctx *panb_ctx = (struct panb_handler_ctx *) ctx;
 
@@ -34,7 +85,7 @@ bool aciotest_panb_handler_update(struct aciodrv_device_ctx *device, uint8_t nod
     }
     
     if (!panb_ctx->running) {
-        printf(">>> PANB:\nDevice has been closed. Press Ctrl+C to exit.");
+        //printf(">>> PANB:\nDevice has been closed. Press Ctrl+C to exit.");
         return true;
     }
     
@@ -42,12 +93,13 @@ bool aciotest_panb_handler_update(struct aciodrv_device_ctx *device, uint8_t nod
         return false;
     }
 
-    printf(">>> PANB:\nPress first and last keys to close device\n");
+    //printf(">>> PANB:\nReady! Open \"Nostalgia ACIO MIDI Interface\" in your soft\n");
 
     for (int i=0; i<AC_IO_PANB_MAX_KEYS; i++) {
-        printf("%01X ", button[i]);
+        //printf("%01X ", button[i]);
+		noteNOST(i);
     }
-    printf("\n");
+    //printf("\n");
 
     /* I added a key combo to properly close the module.
      * Leaving the PANB device in autopolling state without ever
@@ -55,12 +107,13 @@ bool aciotest_panb_handler_update(struct aciodrv_device_ctx *device, uint8_t nod
      * makes it fall into a state where it doesn't send anything anymore 
      * and won't even respond to a reset, thus requiring a power cycle.
      */
-    if (button[0] && button[AC_IO_PANB_MAX_KEYS-1]) {
+/*    if (button[0] && button[AC_IO_PANB_MAX_KEYS-1]) {
         aciodrv_proc_panb_fini(device);
         panb_ctx->running = false;
+		virtualMIDIClosePort(g_port);
         return true;
     }
-
+*/
     /* light the panel */
     for (int i=0; i<AC_IO_PANB_MAX_KEYS; i++) {
         state.key[i].green = (button[i])? 0x7F : 0;
